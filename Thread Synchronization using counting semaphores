#include<stdio.h>
#include<semaphore.h>
#include<pthread.h>
#define max 100

int buffer[max],size=5,front=0,rear=0;
sem_t full,empty;
pthread_mutex_t mutex_lock;
pthread_t producer_thread[10],consumer_thread[10];


void produce(int element);
void consume();

void producer()
{
	int material=rand()%100;
	sem_wait(&empty);
	pthread_mutex_lock(&mutex_lock);
	produce(material);
	pthread_mutex_unlock(&mutex_lock);
	sem_post(&full);
}

void consumer()
{
	sem_wait(&full);
	pthread_mutex_lock(&mutex_lock);
	consume();
	pthread_mutex_unlock(&mutex_lock);
	sem_post(&empty);
}


void produce(int element)
{
int item=element;
if(front<size)
	{
	buffer[front]=item;
	printf("\nProduce Item :%d",buffer[front]);
	front++;
	}
	
else
	{
	printf("\nBuffer if FULL\n");
	}

}

void consume()
{
	if(front>0)
		{
		printf("\nConsume Item : %d",buffer[rear]);
		printf("\n");
		rear++;
		}
	else
	{
	printf("\nBuffer if Empty\n");
	}
}


void main()
{
int i;
sem_init(&full,0,0);
sem_init(&empty,0,size);
pthread_mutex_init(&mutex_lock,NULL);



for(i=0;i<size;i++)
	{
	pthread_create(&consumer_thread[i],NULL,consumer,NULL); 
	pthread_create(&producer_thread[i],NULL,producer,NULL);
	}
	
for(i=0;i<size;i++) 
	{ 
	pthread_join(consumer_thread[i],NULL); 
	pthread_join(producer_thread[i],NULL); 
	} 
}
